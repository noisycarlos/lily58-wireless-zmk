/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "tap-preferred"; };

/ {
    behaviors {
        DualKey: DualKey {
            compatible = "zmk,behavior-hold-tap";
            label = "DUALKEY";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        DoubleNum01: DoubleNum01 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM01";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp NUMBER_1>;
        };

        DoubleNum23: DoubleNum23 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM23";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp NUMBER_3>;
        };

        TapDanceS: TapDanceS {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCES";
            #binding-cells = <0>;
            bindings = <&TypeString>, <&TypeSyncopotamus>;
        };

        TapDanceEmail: TapDanceEmail {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEEMAIL";
            #binding-cells = <0>;
            bindings =
                <&TypesNoisycarlosHey>,
                <&TypeCarlosKPEmail>,
                <&TypesAccountsKP>;
        };

        TapDanceD: TapDanceD {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCED";
            #binding-cells = <0>;
            bindings = <&TypeDeletes>, <&TypeDatabase>;
        };

        TapDanceR: TapDanceR {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCER";
            #binding-cells = <0>;
            bindings = <&TypesRails>, <&TypeReturn>, <&TypeRefactor>;
        };

        TapDanceP: TapDanceP {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEP";
            #binding-cells = <0>;
            bindings = <&TypeImplements>, <&TypeUpdates>, <&Type_ReadBarn>;
        };

        TapDanceNoisycarlos: TapDanceNoisycarlos {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCENOISYCARLOS";
            #binding-cells = <0>;
            bindings = <&TypeNoisycarlos>, <&Full_GiteaPath>, <&TypeGithub>;
        };

        UndoRedo: UndoRedo {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDOREDO";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(LS(Z))>, <&kp LC(Y)>;
        };

        DoubleNum45: DoubleNum45 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM45";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&kp N5>;
        };

        DoubleNum67: DoubleNum67 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM67";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_6>, <&kp N7>;
        };

        DoubleNum89: DoubleNum89 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM89";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp N9>;
        };

        SwitchWindow: SwitchWindow {
            compatible = "zmk,behavior-tap-dance";
            label = "SWITCHWINDOW";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LA(TAB)>;
        };

        NukeViewer: NukeViewer {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEVIEWER";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp NUMBER_2>, <&kp NUMBER_3>;
        };

        NukeChannel: NukeChannel {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKECHANNEL";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp R>, <&kp G>, <&kp B>;
        };

        NukeMerge: NukeMerge {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEMERGE";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp PERIOD>, <&NukeKeymix>;
        };

        VimDeleteTapDance: VimDeleteTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "VIMDELETETAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&VimDeleteLine>;
        };

        VimYank: VimYank {
            compatible = "zmk,behavior-tap-dance";
            label = "VIMYANK";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&VimYankLine>;
        };

        DualLayer: DualLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "DUALLAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        VimDeleteHoldDoubleTap: VimDeleteHoldDoubleTap {
            compatible = "zmk,behavior-hold-tap";
            label = "VIMDELETEHOLDDOUBLETAP";
            bindings = <&mo>, <&VimDeleteTapDance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        CopyCutTapDance: CopyCutTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "COPYCUTTAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        TapDanceTypeA: TapDanceTypeA {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCETYPEA";
            #binding-cells = <0>;
            bindings = <&TypeAdds>, <&TypesAdjusts>;
        };

        PasteSelectAllTapDance: PasteSelectAllTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTESELECTALLTAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LC(A)>;
        };

        NumFn1: NumFn1 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN1";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp F1>;
        };

        NumFn2: NumFn2 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN2";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp F2>;
        };

        NumFn3: NumFn3 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN3";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_3>, <&kp F3>;
        };

        NumFn4: NumFn4 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN4";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&kp F4>;
        };

        NumFn5: NumFn5 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN5";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_5>, <&kp F5>;
        };

        NumFn6: NumFn6 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN6";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_6>, <&kp F6>;
        };

        NumFn7: NumFn7 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN7";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_7>, <&kp F7>;
        };

        NumFn8: NumFn8 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN8";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_8>, <&kp F8>;
        };

        NumFn9: NumFn9 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN9";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_9>, <&kp F9>;
        };

        NumFn10: NumFn10 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN10";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0>, <&kp F10>;
        };

        NumFn11: NumFn11 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN11";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp F11>;
        };

        NumFn12: NumFn12 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN12";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp F12>;
        };

        RailsOpenTagTap: RailsOpenTagTap {
            compatible = "zmk,behavior-tap-dance";
            label = "RAILSOPENTAGTAP";
            #binding-cells = <0>;
            bindings = <&RailsOpenTag>, <&RailsOpenTagContent>, <&RailsComment>;
        };

        CapsWordOrLayer: CapsWordOrLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPSWORDORLAYER";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        NukePointer: NukePointer {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEPOINTER";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp V>, <&kp N>, <&kp C>;
        };

        TapDanceC: TapDanceC {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEC";
            #binding-cells = <0>;
            bindings = <&TypeCarlos>, <&TypeClear>;
        };

        AEPointer: AEPointer {
            compatible = "zmk,behavior-tap-dance";
            label = "AEPOINTER";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp G>, <&kp Q>;
        };

        NukeAddNodeDance: NukeAddNodeDance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEADDNODEDANCE";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&NukeAddNode>, <&DoubleTab>;
        };

        NukeTapSaveRender: NukeTapSaveRender {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKETAPSAVERENDER";
            #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&kp F7>;
        };

        NukeFit: NukeFit {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEFIT";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp F>;
        };

        NukeHomeEnd: NukeHomeEnd {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEHOMEEND";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp END>;
        };

        Plasticity_R_mods_tap_dance: Plasticity_R_mods_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "PLASTICITY_R_MODS_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp LS(R)>, <&kp LS(LA(R))>;
        };

        Plasticity_F_tapDance: Plasticity_F_tapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "PLASTICITY_F_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp F>, <&Plasticity_Find>;
        };

        NukeAddPredefinedNodesTap: NukeAddPredefinedNodesTap {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEADDPREDEFINEDNODESTAP";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp O>, <&kp B>, <&kp C>, <&kp G>, <&kp P>;

            tapping-term-ms = <300>;
        };

        PrintScreenTapDance: PrintScreenTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "PRINTSCREENTAPDANCE";
            #binding-cells = <0>;
            bindings =
                <&kp PRINTSCREEN>,
                <&kp LC(PRINTSCREEN)>,
                <&kp LA(PRINTSCREEN)>;
        };
    };

    macros {
        TypeDeletes: TypeDeletes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp E &kp L &kp E &kp T &kp E &kp S>;
            label = "TYPEDELETES";
        };

        TypeDatabase: TypeDatabase {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp A &kp T &kp A &kp B &kp A &kp S &kp E>;
            label = "TYPEDATABASE";
        };

        TypeString: TypeString {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp T &kp R &kp I &kp N &kp G>;
            label = "TYPESTRING";
        };

        TypeSyncopotamus: TypeSyncopotamus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp RS(S) &kp Y &kp N &kp C &kp O &kp P &kp O &kp T &kp A &kp M &kp U &kp S>;
            label = "TYPESYNCOPOTAMUS";
        };

        TypeReturn: TypeReturn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp T &kp U &kp R &kp N>;
            label = "TYPERETURN";
        };

        TypeRefactor: TypeRefactor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp F &kp A &kp C &kp T &kp O &kp R>;
            label = "TYPEREFACTOR";
        };

        TypeAdds: TypeAdds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp D &kp D &kp S>;
            label = "TYPEADDS";
        };

        TypeWWB: TypeWWB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(W) &kp LS(W) &kp LS(B) &kp UNDER>;
            label = "TYPEWWB";
        };

        TypeFixes: TypeFixes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp F &kp I &kp X &kp E &kp S>;
            label = "TYPEFIXES";
        };

        TypeImplements: TypeImplements {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp I &kp M &kp P &kp L &kp E &kp M &kp E &kp N &kp T &kp S>;
            label = "TYPEIMPLEMENTS";
        };

        TypeUpdates: TypeUpdates {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp U &kp P &kp D &kp A &kp T &kp E &kp S>;
            label = "TYPEUPDATES";
        };

        TypeBasecamp: TypeBasecamp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(B) &kp A &kp S &kp E &kp C &kp A &kp M &kp P>;
            label = "TYPEBASECAMP";
        };

        TypesNoisycarlosHey: TypesNoisycarlosHey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp H &kp E &kp Y &kp DOT &kp C &kp O &kp M>;
            label = "TYPESNOISYCARLOSHEY";
        };

        TypeCarlosKPEmail: TypeCarlosKPEmail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp K &kp I &kp N &kp E &kp T &kp I &kp C &kp P &kp O &kp R &kp T &kp A &kp L &kp DOT &kp C &kp O &kp M>;
            label = "TYPECARLOSKPEMAIL";
        };

        TypeNoisycarlos: TypeNoisycarlos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S>;
            label = "TYPENOISYCARLOS";
        };

        TypeGithub: TypeGithub {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH &kp G &kp I &kp T &kp H &kp U &kp B &kp DOT &kp C &kp O &kp M &kp FSLH &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp FSLH>;
            label = "TYPEGITHUB";
        };

        TypeMoves: TypeMoves {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp O &kp V &kp E &kp S>;
            label = "TYPEMOVES";
        };

        NukeAddNode: NukeAddNode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &to 0>;
            label = "NukeAddNode";
        };

        VimInsertNextChar: VimInsertNextChar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &to 0>;
            label = "VIMINSERTNEXTCHAR";
        };

        VimInsertNextLine: VimInsertNextLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER &to 0>;
            label = "VIMINSERTNEXTLINE";
        };

        VimSearch: VimSearch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F) &to 0>;
            label = "VIMSEARCH";
        };

        VimYankLine: VimYankLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C)>;
            label = "VIMYANKLINE";
        };

        VimDeleteLine: VimDeleteLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(X)>;
            label = "VIMDELETELINE";
        };

        VimInsertAtLineEnd: VimInsertAtLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &to 0>;
            label = "VIMINSERTATLINEEND";
        };

        VimChangeToLineEnd: VimChangeToLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp BACKSPACE &to 0>;
            label = "VIMCHANGETOLINEEND";
        };

        VimInsertAtLineStart: VimInsertAtLineStart {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &to 0>;
            label = "VIMINSERTATLINESTART";
        };

        VimInsertLineAbove: VimInsertLineAbove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW &to 0>;
            label = "VIMINSERTLINEABOVE";
        };

        VimYankToLineEnd: VimYankToLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp LC(C) &kp LEFT>;
            label = "VIMYANKTOLINEEND";
        };

        VimChangeLine: VimChangeLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(X) &to 0>;
            label = "VIMCHANGELINE";
        };

        VimSelectLine: VimSelectLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "VIMSELECTLINE";
        };

        TypesAdjusts: TypesAdjusts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp D &kp J &kp U &kp S &kp T &kp S>;
            label = "TYPESADJUSTS";
        };

        TypesRails: TypesRails {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp A &kp I &kp L &kp S &kp SPACE>;
            label = "TYPESRAILS";
        };

        TypesRailsDb: TypesRailsDb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp A &kp I &kp L &kp S &kp SPACE &kp D &kp B &kp COLON>;
            label = "TYPESRAILSDB";
        };

        RailsOpenTag: rails_opentag {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp PRCNT &kp SPACE>;
            label = "RAILS_OPENTAG";
        };

        RailsCloseTag: rails_closetag {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp PRCNT &kp GT>;
            label = "RAILS_CLOSETAG";
        };

        RailsOpenTagContent: RailsOpenTagContent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp PRCNT &kp EQUAL &kp SPACE>;
            label = "RAILSOPENTAGCONTENT";
        };

        TypeCarlos: TypeCarlos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp A &kp R &kp L &kp O &kp S>;
            label = "TYPECARLOS";
        };

        TypeClear: TypeClear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp L &kp E &kp A &kp R>;
            label = "TYPECLEAR";
        };

        TypesAccountsKP: TypesAccountsKP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp C &kp C &kp O &kp U &kp N &kp T &kp S &kp AT &kp K &kp I &kp N &kp E &kp T &kp I &kp C &kp P &kp O &kp R &kp T &kp A &kp L &kp DOT &kp C &kp O &kp M>;
            label = "TYPESACCOUNTSKP";
        };

        types_gitea_path: types_gitea_path {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH &kp G &kp I &kp T &kp DOT &kp N &kp O &kp I &kp S &kp Y &kp S &kp E &kp R &kp V &kp E &kp R &kp DOT &kp S &kp B &kp S &kp FSLH>;
            label = "TYPES_GITEA_PATH";
        };

        Full_GiteaPath: Full_GiteaPath {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&types_gitea_path>, <&macro_press>, <&TypeNoisycarlos>;

            label = "FULL_GITEAPATH";
        };

        RailsComment: RailsComment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp PRCNT &kp HASH &kp SPACE>;
            label = "RAILSCOMMENT";
        };

        DoubleTab: DoubleTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp TAB>;
            label = "DOUBLETAB";
        };

        Plasticity_Find: Plasticity_Find {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &to 0>;
            label = "PLASTICITY_FIND";
        };

        NukeKeymix: NukeKeymix {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp K &kp E &kp Y &kp M &kp I &kp X &kp ENTER>;
            label = "NUKEKEYMIX";
        };

        Type_ReadBarn: Type_ReadBarn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(R) &kp E &kp A &kp D &kp LS(B) &kp A &kp R &kp N>;
            label = "TYPE_READBARN";
        };
    };

    combos {
        compatible = "zmk,combos";

        WindowSwitcherL {
            bindings = <&kp LG(F12)>;
            key-positions = <53 42>;
        };

        WindowSwitcherR {
            bindings = <&kp LG(F12)>;
            key-positions = <43 54>;
        };

        RailsDbActions {
            bindings = <&TypesRailsDb>;
            key-positions = <40 26>;
            layers = <4>;
        };

        NukeNextKeyframe {
            bindings = <&kp LA(RIGHT)>;
            key-positions = <32 33>;
            layers = <6>;
        };

        NukePrevKeyframe {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <32 31>;
            layers = <6>;
        };

        NukePrevKeyframeL {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <27 26>;
            layers = <6>;
        };

        NukeNextKeyframeL {
            bindings = <&kp LA(RIGHT)>;
            key-positions = <27 28>;
            layers = <6>;
        };

        AE_NextKeyframeL {
            bindings = <&kp K>;
            key-positions = <27 28>;
            layers = <8>;
        };

        AE_NextKeyframe_R {
            bindings = <&kp K>;
            key-positions = <32 33>;
            layers = <8>;
        };

        AE_PrevKeyframeL {
            bindings = <&kp J>;
            key-positions = <27 26>;
            layers = <8>;
        };

        AE_PrevKeyframeR {
            bindings = <&kp J>;
            key-positions = <31 32>;
            layers = <8>;
        };

        NukeDuplicateL {
            bindings = <&kp LA(C)>;
            key-positions = <38 39>;
            layers = <6>;
        };

        NukeDuplicateR {
            bindings = <&kp RA(C)>;
            key-positions = <46 47>;
            layers = <6>;
        };

        NukeCopyL {
            bindings = <&kp LC(C)>;
            key-positions = <40 39>;
            layers = <6>;
        };

        NukeCopyR {
            bindings = <&kp RC(C)>;
            key-positions = <47 46>;
            layers = <6>;
        };

        NukePasteR {
            bindings = <&kp RC(V)>;
            key-positions = <45 44>;
            layers = <6>;
        };

        NukePasteL {
            bindings = <&kp LC(V)>;
            key-positions = <41 40>;
            layers = <6>;
        };

        NukeCreateReferenceR {
            bindings = <&kp RA(K)>;
            key-positions = <45 47>;
            layers = <6>;
        };

        NukeCreateReferenceL {
            bindings = <&kp LA(K)>;
            key-positions = <40 38>;
            layers = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            display-name = "Qwerty";
            bindings = <
&kp GRAVE             &NumFn1  &NumFn2         &NumFn3           &NumFn4      &NumFn5                                                   &NumFn6         &NumFn7      &NumFn8           &NumFn9              &NumFn10  &NumFn12
&kp TAB               &kp Q    &DualKey 3 W    &DualKey 2 E      &kp R        &kp T                                                     &kp Y           &kp U        &DualKey 2 I      &DualKey 3 O         &kp P     &NumFn11
&CapsWordOrLayer 9 0  &kp A    &kp S           &kp D             &kp F        &DualKey 4 G                                              &DualKey 4 H    &kp J        &kp K             &kp L                &kp SEMI  &DualKey 9 APOS
&mo 5                 &kp Z    &mt LEFT_ALT X  &mt LEFT_SHIFT C  &mt LCTRL V  &mt LEFT_GUI B  &kp ESC             &kp ESC               &mt LEFT_GUI N  &mt LCTRL M  &mt LSHIFT COMMA  &mt LEFT_ALT PERIOD  &kp FSLH  &DualKey 5 BACKSLASH
                                               &mo 5             &kp DELETE   &kp SPACE       &DualKey 1 ENTER    &DualKey 1 BACKSPACE  &kp SPACE       &kp ENTER    &mo 5
            >;
        };

        Navigation {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Nav";
            bindings = <
&kp LA(F4)      &DoubleNum01  &DoubleNum23   &DoubleNum45      &DoubleNum67   &DoubleNum89                       &trans         &trans       &trans          &trans         &trans           &trans
&kp DELETE      &kp LC(W)     &kp LC(PG_UP)  &kp UP            &kp LC(PG_DN)  &kp LC(LS(T))                      &kp LC(PG_UP)  &kp PG_DN    &kp PG_UP       &kp LC(PG_DN)  &kp PRINTSCREEN  &kp DELETE
&kp GRAVE       &UndoRedo     &kp LEFT       &kp DOWN          &kp RIGHT      &kp PRCNT                          &kp LEFT       &kp DOWN     &kp UP          &kp RIGHT      &kp SCROLLLOCK   &kp C_PAUSE
&DualLayer 5 0  &trans        &trans         &mt LEFT_SHIFT S  &mt LCTRL D    &mt RIGHT_WIN F  &trans    &trans  &kp F          &kp H        &kp HOME        &kp END        &kp RBRC         &DualLayer 5 0
                                             &DualLayer 5 0    &kp LA(TAB)    &trans           &trans    &trans  &trans         &kp RA(TAB)  &DualLayer 5 0
            >;
        };

        Numbers {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Num";
            bindings = <
&kp LA(F4)      &kp F1     &kp F2  &kp F3             &kp F4      &kp F5                          &kp F6           &kp F7           &kp F8           &kp F9           &kp F10       &kp F12
&trans          &kp EQUAL  &kp N7  &kp N8             &kp N9      &kp FSLH                        &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL  &kp F11
&kp K_CALC      &kp PLUS   &kp N4  &kp N5             &kp N6      &kp STAR                        &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp K_CALCULATOR
&kp KP_NUMLOCK  &kp RET    &kp N1  &mt LEFT_SHIFT N2  &kp N3      &kp MINUS  &trans    &trans     &kp KP_SUBTRACT  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &kp LS(LC(KP_NUMLOCK))
                                   &trans             &kp PERIOD  &kp N0     &trans    &kp ENTER  &kp KP_NUMBER_0  &kp KP_DOT       &trans
            >;
        };

        Symbols {
            bindings = <
&kp K_SLEEP  &kp LG(N0)      &RailsOpenTagTap      &kp EXCL   &RailsCloseTag         &trans                               &trans         &kp LEFT_PARENTHESIS  &trans         &kp RIGHT_PARENTHESIS  &kp LG(N0)         &kp K_SLEEP
&trans       &kp SCROLLLOCK  &kp AT_SIGN           &kp HASH   &kp DOLLAR             &kp PERCENT                          &kp CARET      &kp LEFT_BRACE        &kp PIPE       &kp RIGHT_BRACE        &kp SCROLLLOCK     &trans
&trans       &trans          &kp LEFT_PARENTHESIS  &kp STAR   &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES                    &kp BACKSLASH  &kp LEFT_BRACKET      &kp AMPERSAND  &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &trans
&trans       &trans          &kp TILDE             &kp GRAVE  &kp QUESTION           &kp SQT            &trans    &trans  &kp KP_PLUS    &kp MINUS             &kp COLON      &kp EQUAL              &trans             &trans
                                                   &trans     &trans                 &kp UNDER          &trans    &trans  &kp UNDER      &kp UNDER             &trans
            >;

            label = "SYMBOLS";
        };

        Misc {
            bindings = <
&trans  &none           &TapDanceEmail  &TapDanceNoisycarlos  &PrintScreenTapDance  &trans                                         &kp LC(LG(LA(A)))      &kp LA(LC(LG(S)))      &kp LA(LC(LG(D)))      &kp LA(LC(LG(F)))    &kp LA(LG(LC(G)))          &none
&mo 5   &trans          &TypeWWB        &TypeFixes            &TapDanceP            &TypeBasecamp                                  &kp LG(LC(LA(Y)))      &kp LA(LC(LG(U)))      &kp LA(LC(LG(I)))      &kp LC(LG(LA(O)))    &kp LC(LG(LA(P)))          &mo 5
&to 6   &TapDanceTypeA  &TapDanceR      &TapDanceS            &kp C_VOLUME_UP       &none                                          &kp LA(LC(LG(H)))      &kp LA(LC(LG(J)))      &kp LA(LC(LG(K)))      &kp LC(LA(LG(L)))    &kp LA(LC(LG(SEMICOLON)))  &kp LA(LC(LG(ENTER)))
&none   &none           &kp K_PREV      &kp K_PLAY_PAUSE      &kp K_NEXT            &none                  &kp K_MUTE      &trans  &kp LA(LG(LC(N)))      &kp LA(LC(LG(M)))      &kp LA(LG(LC(COMMA)))  &kp LA(LC(LG(DOT)))  &kp LG(LC(LA(FSLH)))       &trans
                                        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LC(LA(LG(SPACE)))  &kp C_VOL_DN    &mo 5   &kp RA(RC(RG(SPACE)))  &kp RG(RC(RA(SPACE)))  &trans
            >;

            label = "Misc";
        };

        Layers {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&bt BT_PRV  &bt BT_NXT    &to 3         &to 2         &to 7         &to 0                          &to 0          &to 7         &to 2         &to 3         &bt BT_PRV    &bt BT_NXT
&none       &kp LC(A)     &to 7         &to 8         &to 6         &to 0                          &to 0          &to 6         &to 8         &to 7         &kp RC(A)     &none
&none       &none         &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(LS(V))  &none    &none  &kp RC(RS(V))  &kp RC(V)     &kp RC(C)     &kp RC(X)     &none         &none
                                        &trans        &none         &none          &to 1    &to 1  &none          &none         &trans
            >;

            label = "Lay/BT";
        };

        Nuke {
            bindings = <
&NukeAddNode       &kp D      &kp I           &to 10            &kp O        &NukeMerge                                    &NukeMerge                  &kp I                &to 10             &kp O           &NukeTapSaveRender  &kp D
&NukeAddNodeDance  &kp Q      &kp HOME        &kp UP_ARROW      &kp END      &NukeAddPredefinedNodesTap                    &NukeAddPredefinedNodesTap  &kp HOME             &kp UP_ARROW       &kp END         &kp Q               &NukeAddNodeDance
&NukeChannel       &UndoRedo  &kp LEFT        &kp DOWN          &kp RIGHT    &NukeViewer                                   &NukeViewer                 &kp LEFT             &kp DOWN           &kp RIGHT       &UndoRedo           &NukeChannel
&to 0              &trans     &mt LEFT_ALT J  &mt LEFT_SHIFT K  &mt LCTRL L  &NukeFit                    &trans    &trans  &NukeFit                    &mt RIGHT_CONTROL J  &mt RIGHT_SHIFT K  &mt LEFT_ALT L  &kp Z               &to 0
                                              &to 0             &trans       &kp SPACE                   &trans    &trans  &kp SPACE                   &trans               &to 0
            >;

            label = "Nuke";
        };

        Plasticity {
            bindings = <
&kp EQUAL  &trans     &trans        &trans        &trans                        &trans                    &kp NUMBER_1  &kp NUMBER_2                  &kp NUMBER_3  &kp NUMBER_4    &kp N5     &kp EQUAL
&kp TAB    &kp Q      &DualKey 3 W  &DualKey 2 E  &Plasticity_R_mods_tap_dance  &kp T                     &kp T         &Plasticity_R_mods_tap_dance  &DualKey 2 E  &DualKey 3 W    &kp Q      &kp TAB
&UndoRedo  &kp A      &kp S         &kp D         &Plasticity_F_tapDance        &kp G                     &kp G         &Plasticity_F_tapDance        &kp D         &kp S           &kp A      &UndoRedo
&to 0      &kp SLASH  &mt LALT X    &mt LSHIFT C  &mt LCTRL V                   &kp B   &trans    &trans  &kp B         &mt LCTRL V                   &mt LSHIFT C  &mt LEFT_ALT X  &kp SLASH  &to 0
                                    &trans        &trans                        &trans  &trans    &trans  &trans        &trans                        &trans
            >;

            label = "Plasticity";
        };

        AfterEffects {
            bindings = <
&kp LS(LA(LC(V)))  &trans         &kp HOME   &AEPointer            &kp END            &kp LC(B)                          &kp LC(B)  &kp HOME         &AEPointer           &kp END        &kp LS(LC(N0))  &kp RC(RA(RS(V)))
&trans             &kp LS(LC(H))  &trans     &kp LC(UP)            &trans             &kp KP_NUMBER_0                    &trans     &kp KP_NUMBER_0  &kp LC(UP)           &kp RC(RS(H))  &kp B           &kp N
&none              &UndoRedo      &kp PG_UP  &kp LC(DOWN)          &kp PG_DN          &trans                             &trans     &kp PG_UP        &kp RC(DOWN)         &kp PG_DN      &UndoRedo       &none
&trans             &trans         &trans     &mt LEFT_SHIFT SLASH  &kp RA(RS(RC(V)))  &kp SPACE        &trans    &trans  &kp SPACE  &kp SLASH        &mt LEFT_SHIFT FSLH  &trans         &trans          &trans
                                             &trans                &trans             &trans           &trans    &trans  &trans     &trans           &trans
            >;

            label = "AE";
        };

        QuickActions {
            bindings = <
&trans  &trans          &trans      &trans       &trans         &trans                    &trans  &trans         &trans       &trans     &trans          &trans
&trans  &kp SCROLLLOCK  &kp INSERT  &trans       &trans         &trans                    &trans  &trans         &trans       &kp INS    &kp SCROLLLOCK  &trans
&trans  &kp CAPS        &trans      &kp LA(TAB)  &kp LA(GRAVE)  &trans                    &trans  &kp RA(GRAVE)  &kp LA(TAB)  &UndoRedo  &kp CAPSLOCK    &trans
&trans  &kp LC(A)       &kp LC(X)   &kp LC(C)    &kp LC(V)      &trans  &trans    &trans  &trans  &kp LC(V)      &kp LC(C)    &kp LC(X)  &kp LC(A)       &trans
                                    &trans       &trans         &trans  &trans    &trans  &trans  &trans         &trans
            >;

            label = "Quick";
        };

        Nuke_Numbers {
            display-name = "NukeNum";
            bindings = <
&NukeAddNode       &kp F1     &kp I     &to 6             &kp O      &NukeMerge                        &NukeMerge    &kp I            &to 6                       &kp O            &NukeTapSaveRender  &kp D
&NukeAddNodeDance  &kp Q      &kp HOME  &kp UP_ARROW      &kp END    &NukeViewer                       &NukePointer  &kp KP_NUMBER_7  &kp KP_NUMBER_8             &kp KP_NUMBER_9  &kp Q               &NukeHomeEnd
&NukeChannel       &UndoRedo  &kp LEFT  &kp DOWN_ARROW    &kp RIGHT  &NukeViewer                       &NukeViewer   &kp KP_NUMBER_4  &mt LEFT_SHIFT LOCKING_NUM  &kp KP_NUMBER_6  &UndoRedo           &NukeChannel
&to 0              &kp Z      &kp J     &mt LEFT_SHIFT K  &kp L      &NukeFit     &trans    &trans     &NukeFit      &kp KP_NUMBER_1  &kp KP_NUMBER_2             &kp KP_NUMBER_3  &kp Z               &to 0
                                        &trans            &trans     &trans       &trans    &kp ENTER  &kp KP_N0     &kp KP_DOT       &trans
            >;
        };
    };
};
