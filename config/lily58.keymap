/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "tap-preferred"; };

/ {
    behaviors {
        DualKey: DualKey {
            compatible = "zmk,behavior-hold-tap";
            label = "DUALKEY";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        DoubleNum01: DoubleNum01 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM01";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp NUMBER_1>;
        };

        DoubleNum23: DoubleNum23 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM23";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp NUMBER_3>;
        };

        TapDanceS: TapDanceS {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCES";
            #binding-cells = <0>;
            bindings = <&TypeString>, <&TypeSyncopotamus>;
        };

        TapDanceEmail: TapDanceEmail {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEEMAIL";
            #binding-cells = <0>;
            bindings = <&TypesNoisycarlosHey>, <&TypeCarlosKPEmail>;
        };

        TapDanceD: TapDanceD {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCED";
            #binding-cells = <0>;
            bindings = <&TypeDeletes>, <&TypeDatabase>;
        };

        TapDanceR: TapDanceR {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCER";
            #binding-cells = <0>;
            bindings = <&TypesRails>, <&TypeReturn>, <&TypeRefactor>;
        };

        TapDanceP: TapDanceP {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEP";
            #binding-cells = <0>;
            bindings = <&TypeImplements>, <&TypeUpdates>;
        };

        TapDanceNoisycarlos: TapDanceNoisycarlos {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCENOISYCARLOS";
            #binding-cells = <0>;
            bindings = <&TypeNoisycarlos>, <&TypeGithub>;
        };

        UndoRedo: UndoRedo {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDOREDO";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(LS(Z))>, <&kp LC(Y)>;
        };

        DoubleNum45: DoubleNum45 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM45";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&kp N5>;
        };

        DoubleNum67: DoubleNum67 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM67";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_6>, <&kp N7>;
        };

        DoubleNum89: DoubleNum89 {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLENUM89";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp N9>;
        };

        SwitchWindow: SwitchWindow {
            compatible = "zmk,behavior-tap-dance";
            label = "SWITCHWINDOW";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LA(TAB)>;
        };

        NukeViewer: NukeViewer {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEVIEWER";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp NUMBER_2>, <&kp NUMBER_3>;
        };

        NukeChannel: NukeChannel {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKECHANNEL";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp R>, <&kp G>, <&kp B>;
        };

        NukeMerge: NukeMerge {
            compatible = "zmk,behavior-tap-dance";
            label = "NUKEMERGE";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp PERIOD>;
        };

        VimDeleteTapDance: VimDeleteTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "VIMDELETETAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&VimDeleteLine>;
        };

        VimYank: VimYank {
            compatible = "zmk,behavior-tap-dance";
            label = "VIMYANK";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&VimYankLine>;
        };

        DualLayer: DualLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "DUALLAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        VimDeleteHoldDoubleTap: VimDeleteHoldDoubleTap {
            compatible = "zmk,behavior-hold-tap";
            label = "VIMDELETEHOLDDOUBLETAP";
            bindings = <&mo>, <&VimDeleteTapDance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        CopyCutTapDance: CopyCutTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "COPYCUTTAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        TapDanceTypeA: TapDanceTypeA {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCETYPEA";
            #binding-cells = <0>;
            bindings = <&TypeAdds>, <&TypesAdjusts>;
        };

        PasteSelectAllTapDance: PasteSelectAllTapDance {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTESELECTALLTAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LC(A)>;
        };

        NumFn1: NumFn1 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN1";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp F1>;
        };

        NumFn2: NumFn2 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN2";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp F2>;
        };

        NumFn3: NumFn3 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN3";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_3>, <&kp F3>;
        };

        NumFn4: NumFn4 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN4";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&kp F4>;
        };

        NumFn5: NumFn5 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN5";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_5>, <&kp F5>;
        };

        NumFn6: NumFn6 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN6";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_6>, <&kp F6>;
        };

        NumFn7: NumFn7 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN7";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_7>, <&kp F7>;
        };

        NumFn8: NumFn8 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN8";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_8>, <&kp F8>;
        };

        NumFn9: NumFn9 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN9";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_9>, <&kp F9>;
        };

        NumFn10: NumFn10 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN10";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0>, <&kp F10>;
        };

        NumFn11: NumFn11 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN11";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp F11>;
        };

        NumFn12: NumFn12 {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMFN12";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp F12>;
        };
    };

    macros {
        TypeDeletes: TypeDeletes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp E &kp L &kp E &kp T &kp E &kp S>;
            label = "TYPEDELETES";
        };

        TypeDatabase: TypeDatabase {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp A &kp T &kp A &kp B &kp A &kp S &kp E>;
            label = "TYPEDATABASE";
        };

        TypeString: TypeString {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp T &kp R &kp I &kp N &kp G>;
            label = "TYPESTRING";
        };

        TypeSyncopotamus: TypeSyncopotamus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp RS(S) &kp Y &kp N &kp C &kp O &kp P &kp O &kp T &kp A &kp M &kp U &kp S>;
            label = "TYPESYNCOPOTAMUS";
        };

        TypeReturn: TypeReturn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp T &kp U &kp R &kp N>;
            label = "TYPERETURN";
        };

        TypeRefactor: TypeRefactor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp F &kp A &kp C &kp T &kp O &kp R>;
            label = "TYPEREFACTOR";
        };

        TypeAdds: TypeAdds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp D &kp D &kp S>;
            label = "TYPEADDS";
        };

        TypeWWB: TypeWWB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(W) &kp LS(W) &kp LS(B) &kp UNDER>;
            label = "TYPEWWB";
        };

        TypeFixes: TypeFixes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp F &kp I &kp X &kp E &kp S>;
            label = "TYPEFIXES";
        };

        TypeImplements: TypeImplements {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp I &kp M &kp P &kp L &kp E &kp M &kp E &kp N &kp T &kp S>;
            label = "TYPEIMPLEMENTS";
        };

        TypeUpdates: TypeUpdates {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp U &kp P &kp D &kp A &kp T &kp E &kp S>;
            label = "TYPEUPDATES";
        };

        TypeBasecamp: TypeBasecamp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(B) &kp A &kp S &kp E &kp C &kp A &kp M &kp P>;
            label = "TYPEBASECAMP";
        };

        TypesNoisycarlosHey: TypesNoisycarlosHey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp H &kp E &kp Y &kp DOT &kp C &kp O &kp M>;
            label = "TYPESNOISYCARLOSHEY";
        };

        TypeCarlosKPEmail: TypeCarlosKPEmail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp K &kp I &kp N &kp E &kp T &kp I &kp C &kp P &kp O &kp R &kp T &kp A &kp L &kp DOT &kp C &kp O &kp M>;
            label = "TYPECARLOSKPEMAIL";
        };

        TypeNoisycarlos: TypeNoisycarlos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S>;
            label = "TYPENOISYCARLOS";
        };

        TypeGithub: TypeGithub {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH &kp G &kp I &kp T &kp H &kp U &kp B &kp DOT &kp C &kp O &kp M &kp FSLH &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp FSLH>;
            label = "TYPEGITHUB";
        };

        TypeMoves: TypeMoves {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp O &kp V &kp E &kp S>;
            label = "TYPEMOVES";
        };

        NukeAddNode: NukeAddNode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &to 0>;
            label = "NukeAddNode";
        };

        VimInsertNextChar: VimInsertNextChar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &to 0>;
            label = "VIMINSERTNEXTCHAR";
        };

        VimInsertNextLine: VimInsertNextLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER &to 0>;
            label = "VIMINSERTNEXTLINE";
        };

        VimSearch: VimSearch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F) &to 0>;
            label = "VIMSEARCH";
        };

        VimYankLine: VimYankLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &to 0>;
            label = "VIMYANKLINE";
        };

        VimDeleteLine: VimDeleteLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(X) &to 0>;
            label = "VIMDELETELINE";
        };

        VimInsertAtLineEnd: VimInsertAtLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &to 0>;
            label = "VIMINSERTATLINEEND";
        };

        VimChangeToLineEnd: VimChangeToLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp BACKSPACE &to 0>;
            label = "VIMCHANGETOLINEEND";
        };

        VimInsertAtLineStart: VimInsertAtLineStart {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &to 0>;
            label = "VIMINSERTATLINESTART";
        };

        VimInsertLineAbove: VimInsertLineAbove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW &to 0>;
            label = "VIMINSERTLINEABOVE";
        };

        VimYankToLineEnd: VimYankToLineEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp LC(C) &kp LEFT>;
            label = "VIMYANKTOLINEEND";
        };

        VimChangeLine: VimChangeLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(X) &to 0>;
            label = "VIMCHANGELINE";
        };

        VimSelectLine: VimSelectLine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "VIMSELECTLINE";
        };

        TypesAdjusts: TypesAdjusts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp D &kp J &kp U &kp S &kp T &kp S>;
            label = "TYPESADJUSTS";
        };

        TypesRails: TypesRails {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp A &kp I &kp L &kp S &kp SPACE>;
            label = "TYPESRAILS";
        };
    };

    combos {
        compatible = "zmk,combos";

        WindowSwitcherL {
            bindings = <&kp LG(F12)>;
            key-positions = <53 42>;
        };

        WindowSwitcherR {
            bindings = <&kp LG(F12)>;
            key-positions = <43 54>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   =   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  D   |  V   |   "["  |  |  "]"  |  K   |  H    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp GRAVE  &NumFn1  &NumFn2         &NumFn3           &NumFn4      &NumFn5                                                   &NumFn6          &NumFn7      &NumFn8                &NumFn9               &NumFn10  &NumFn12
&kp TAB    &kp Q    &DualKey 3 W    &DualKey 2 F      &kp P        &kp B                                                     &kp J            &kp L        &kp U                  &DualKey 3 Y          &kp SEMI  &NumFn11
&mo 11     &kp A    &kp R           &kp S             &kp T        &DualKey 4 G                                              &DualKey 4 M     &kp N        &kp E                  &kp I                 &kp O     &DualKey 11 APOS
&mo 5      &kp Z    &mt LEFT_ALT X  &mt LEFT_SHIFT C  &mt LCTRL D  &mt LEFT_GUI V  &kp ESC             &kp ESC               &mt RIGHT_GUI K  &mt RCTRL H  &mt RIGHT_SHIFT COMMA  &mt RIGHT_ALT PERIOD  &kp FSLH  &DualKey 5 BACKSLASH
                                    &sl 2             &kp DELETE   &kp SPACE       &DualKey 1 ENTER    &DualKey 1 BACKSPACE  &kp SPACE        &kp ENTER    &sl 2
            >;
        };

        Navigation {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Nav";
            bindings = <
&kp LA(F4)  &DoubleNum01  &DoubleNum23   &DoubleNum45      &DoubleNum67   &DoubleNum89                       &trans         &trans       &trans     &trans         &trans           &trans
&kp DELETE  &kp LC(F4)    &kp LC(PG_UP)  &kp UP            &kp LC(PG_DN)  &kp LC(LS(T))                      &kp LC(PG_UP)  &kp PG_DN    &kp PG_UP  &kp LC(PG_DN)  &kp PRINTSCREEN  &kp DELETE
&kp GRAVE   &UndoRedo     &kp LEFT       &kp DOWN          &kp RIGHT      &kp PRCNT                          &kp LEFT       &kp DOWN     &kp UP     &kp RIGHT      &kp SCROLLLOCK   &kp C_PAUSE
&trans      &trans        &trans         &mt LEFT_SHIFT S  &mt LCTRL D    &mt RIGHT_WIN F  &trans    &trans  &kp F          &kp H        &kp HOME   &kp END        &kp RBRC         &kp PIPE
                                         &to 0             &kp LA(TAB)    &trans           &trans    &trans  &kp DELETE     &kp RA(TAB)  &to 0
            >;
        };

        Numbers {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Num";
            bindings = <
&kp LA(F4)  &kp F1      &kp F2         &kp F3    &kp F4         &kp F5                              &kp F6           &kp F7           &kp F8           &kp F9           &kp F10       &kp F12
&trans      &kp LC(F4)  &kp LC(PG_UP)  &kp UP    &kp LC(PG_DN)  &kp LC(LS(T))                       &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL  &kp F11
&trans      &kp LC(Z)   &kp LEFT       &kp DOWN  &kp RIGHT      &kp LA(LEFT)                        &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp K_CALCULATOR
&kp LC(C)   &kp Z       &kp PG_UP      &none     &kp PG_DN      &kp F          &trans    &trans     &kp KP_SUBTRACT  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &kp LS(LC(KP_NUMLOCK))
                                       &to 0     &trans         &trans         &trans    &kp ENTER  &kp KP_NUMBER_0  &kp KP_DOT       &to 0
            >;
        };

        Symbols {
            bindings = <
&kp CAPS  &trans  &trans                &kp EXCL   &trans                 &trans                               &trans         &kp LEFT_PARENTHESIS  &trans         &kp RIGHT_PARENTHESIS  &trans             &kp K_SLEEP
&trans    &trans  &kp AT_SIGN           &kp HASH   &kp DOLLAR             &kp PERCENT                          &kp CARET      &kp LEFT_BRACE        &kp PIPE       &kp RIGHT_BRACE        &trans             &trans
&trans    &trans  &kp LEFT_PARENTHESIS  &kp STAR   &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES                    &kp BACKSLASH  &kp LEFT_BRACKET      &kp AMPERSAND  &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &trans
&trans    &trans  &kp TILDE             &kp GRAVE  &kp QUESTION           &kp SQT            &trans    &trans  &kp KP_PLUS    &kp MINUS             &kp COLON      &kp EQUAL              &trans             &trans
                                        &to 0      &trans                 &kp UNDER          &trans    &trans  &kp UNDER      &kp UNDER             &to 0
            >;
        };

        Misc {
            bindings = <
&trans      &trans          &TapDanceEmail    &TapDanceNoisycarlos  &kp PRINTSCREEN       &trans                                       &kp LC(LG(LA(F6)))     &kp LA(LC(LG(F7)))     &kp LA(LC(LG(F8)))     &kp LA(LC(LG(F9)))   &kp LA(LG(LC(F10)))   &kp K_SLEEP
&mo 5       &trans          &TypeWWB          &TypeFixes            &TapDanceP            &TypeBasecamp                                &kp LG(LC(LA(J)))      &kp LA(LC(LG(L)))      &kp LA(LC(LG(U)))      &kp LC(LG(LA(Y)))    &kp LC(LG(LA(SEMI)))  &mo 5
&to 6       &TapDanceTypeA  &TapDanceR        &TapDanceS            &kp C_VOL_DN          &kp C_VOL_UP                                 &kp LA(LC(LG(M)))      &kp LA(LC(LG(N)))      &kp LA(LC(LG(E)))      &kp LC(LA(LG(I)))    &kp LA(LC(LG(O)))     &kp LA(LG(LC(ENTER)))
&kp K_PREV  &kp K_NEXT      &kp K_PLAY_PAUSE  &none                 &TapDanceD            &TypeMoves             &kp K_MUTE    &trans  &kp LA(LG(LC(K)))      &kp LA(LC(LG(H)))      &kp LA(LG(LC(COMMA)))  &kp LA(LC(LG(DOT)))  &kp LG(LC(LA(FSLH)))  &trans
                                              &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LC(LA(LG(SPACE)))  &mo 5         &mo 5   &kp RA(RC(RG(SPACE)))  &kp RG(RC(RA(SPACE)))  &trans
            >;
        };

        Layers {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&bt BT_PRV  &bt BT_NXT    &to 3         &to 2         &none         &none                         &none         &none         &to 2         &to 3         &bt BT_PRV    &bt BT_NXT
&none       &none         &to 7         &to 8         &to 6         &none                         &none         &to 6         &to 8         &to 7         &none         &none
&none       &none         &none         &none         &to 9         &none         &none    &none  &none         &to 9         &none         &none         &none         &none
                                        &none         &none         &none         &to 1    &to 1  &none         &none         &none
            >;
        };

        Nuke {
            bindings = <
&NukeAddNode  &NukeViewer  &kp UP    &trans            &kp DOWN   &NukeMerge                        &NukeMerge   &kp UP    &trans             &kp DOWN        &trans     &NukeAddNode
&NukeAddNode  &kp Q        &trans    &kp HOME          &kp J      &kp L                             &kp J        &kp L     &kp HOME           &kp Q           &kp I      &kp O
&NukeChannel  &UndoRedo    &kp LEFT  &kp END           &kp RIGHT  &NukeViewer                       &NukeViewer  &kp LEFT  &kp END            &kp RIGHT       &UndoRedo  &NukeChannel
&trans        &trans       &trans    &mt LEFT_SHIFT F  &trans     &mt LEFT_GUI K  &trans    &trans  &trans       &trans    &mt RIGHT_SHIFT F  &mt LEFT_ALT X  &kp Z      &trans
                                     &to 0             &trans     &trans          &trans    &trans  &trans       &trans    &to 0
            >;
        };

        Fusion360 {
            bindings = <
&trans   &trans     &trans      &trans        &trans       &trans                      &trans    &trans       &trans             &trans           &trans     &trans
&kp TAB  &kp Q      &kp P       &kp F         &kp L        &trans                      &trans    &kp L        &kp F              &kp P            &kp Q      &kp TAB
&trans   &kp O      &kp R       &kp S         &kp E        &kp M                       &kp M     &kp E        &kp S              &kp R            &kp O      &trans
&trans   &UndoRedo  &mt LALT X  &mt LSHIFT C  &mt LCTRL I  &kp LGUI  &trans    &trans  &kp LGUI  &mt RCTRL I  &mt RIGHT_SHIFT C  &mt RIGHT_ALT X  &UndoRedo  &trans
                                &to 0         &trans       &trans    &trans    &trans  &trans    &trans       &to 0
            >;
        };

        AfterEffects {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        VimPrimary {
            bindings = <
&trans  &trans              &trans         &trans  &kp END                       &trans                            &trans         &trans           &trans     &kp HOME   &trans              &trans
&trans  &trans              &kp LC(RIGHT)  &trans  &kp LC(V)                     &kp LC(LEFT)                      &kp F3         &kp LC(RIGHT)    &kp LC(Z)  &VimYank   &trans              &trans
&trans  &VimInsertNextChar  &kp LS(RIGHT)  &trans  &trans                        &kp LC(HOME)                      &kp LEFT       &kp DOWN         &kp UP     &kp RIGHT  &VimInsertNextLine  &trans
&trans  &trans              &kp DEL        &mo 10  &VimDeleteHoldDoubleTap 10 0  &kp LEFT_SHIFT  &trans    &trans  &kp LS(SPACE)  &DualLayer 10 0  &mo 10     &kp TAB    &VimSearch          &trans
                                           &trans  &trans                        &trans          &trans    &trans  &trans         &trans           &trans
            >;
        };

        VimSecondary {
            bindings = <
&trans  &trans               &trans             &trans               &kp RS(END)  &trans                              &trans        &trans                 &trans       &kp LS(HOME)   &kp DOWN             &trans
&trans  &trans               &kp LS(LC(RIGHT))  &trans               &kp LC(V)    &kp LS(LC(LEFT))                    &kp F3        &VimInsertNextLine     &kp PG_UP    &VimYankLine   &trans               &trans
&trans  &VimInsertAtLineEnd  &kp LS(LC(Z))      &kp LC(S)            &none        &kp LC(END)                         &kp LS(LEFT)  &kp LS(DOWN)           &kp LS(UP)   &kp LS(RIGHT)  &VimInsertLineAbove  &trans
&trans  &trans               &kp LS(TAB)        &VimChangeToLineEnd  &kp PG_DN    &VimSelectLine    &trans    &trans  &trans        &VimInsertAtLineStart  &kp LS(TAB)  &kp TAB        &VimSearch           &trans
                                                &trans               &trans       &trans            &trans    &trans  &trans        &trans                 &trans
            >;
        };

        QuickActions {
            bindings = <
&trans  &trans    &trans  &trans       &trans         &trans                    &trans  &trans         &trans       &trans     &trans                   &trans
&trans  &trans    &trans  &trans       &trans         &trans                    &trans  &trans         &trans       &UndoRedo  &CopyCutTapDance         &trans
&trans  &kp CAPS  &trans  &kp LA(TAB)  &kp LA(GRAVE)  &trans                    &trans  &kp RA(GRAVE)  &kp LA(TAB)  &UndoRedo  &PasteSelectAllTapDance  &trans
&trans  &trans    &trans  &trans       &trans         &trans  &trans    &trans  &trans  &trans         &trans       &none      &trans                   &trans
                          &trans       &trans         &trans  &trans    &trans  &trans  &trans         &trans
            >;
        };
    };
};
