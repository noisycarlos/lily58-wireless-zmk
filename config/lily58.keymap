/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "tap-preferred"; };

/ {
    behaviors {
        DualKey: DualKey {
            compatible = "zmk,behavior-hold-tap";
            label = "DUALKEY";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
        };

        zeroOne: zeroOne {
            compatible = "zmk,behavior-tap-dance";
            label = "ZEROONE";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp NUMBER_1>;
        };

        twoThree: twoThree {
            compatible = "zmk,behavior-tap-dance";
            label = "TWOTHREE";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp NUMBER_1>;
        };

        TapDanceS: TapDanceS {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCES";
            #binding-cells = <0>;
            bindings = <&TypeString>, <&TypeSyncopotamus>;
        };

        TapDanceEmail: TapDanceEmail {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEEMAIL";
            #binding-cells = <0>;
            bindings = <&TypesNoisycarlosHey>, <&TypeCarlosKPEmail>;
        };

        TapDanceD: TapDanceD {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCED";
            #binding-cells = <0>;
            bindings = <&TypeDeletes>, <&TypeDatabase>;
        };

        TapDanceR: TapDanceR {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCER";
            #binding-cells = <0>;
            bindings = <&TypeReturn>, <&TypeRefactor>;
        };

        TapDanceP: TapDanceP {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCEP";
            #binding-cells = <0>;
            bindings = <&TypeImplements>, <&TypeUpdates>;
        };

        TapDanceNoisycarlos: TapDanceNoisycarlos {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCENOISYCARLOS";
            #binding-cells = <0>;
            bindings = <&TypeNoisycarlos>, <&TypeGithub>;
        };
    };

    macros {
        TypeDeletes: TypeDeletes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp E &kp L &kp E &kp T &kp E &kp S>;
            label = "TYPEDELETES";
        };

        TypeDatabase: TypeDatabase {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp D &kp A &kp T &kp A &kp B &kp A &kp S &kp E>;
            label = "TYPEDATABASE";
        };

        TypeString: TypeString {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp T &kp R &kp I &kp N &kp G>;
            label = "TYPESTRING";
        };

        TypeSyncopotamus: TypeSyncopotamus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp RS(S) &kp Y &kp N &kp C &kp O &kp P &kp O &kp T &kp A &kp M &kp U &kp S>;
            label = "TYPESYNCOPOTAMUS";
        };

        TypeReturn: TypeReturn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp T &kp U &kp R &kp N>;
            label = "TYPERETURN";
        };

        TypeRefactor: TypeRefactor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp E &kp F &kp A &kp C &kp T &kp O &kp R>;
            label = "TYPEREFACTOR";
        };

        TypeAdds: TypeAdds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp D &kp D &kp S>;
            label = "TYPEADDS";
        };

        TypeWWB: TypeWWB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(W) &kp LS(W) &kp LS(B) &kp UNDER>;
            label = "TYPEWWB";
        };

        TypeFixes: TypeFixes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp F &kp I &kp X &kp E &kp S>;
            label = "TYPEFIXES";
        };

        TypeImplements: TypeImplements {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp I &kp M &kp P &kp L &kp E &kp M &kp E &kp N &kp T &kp S>;
            label = "TYPEIMPLEMENTS";
        };

        TypeUpdates: TypeUpdates {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp U &kp P &kp D &kp A &kp T &kp E &kp S>;
            label = "TYPEUPDATES";
        };

        TypeBasecamp: TypeBasecamp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(B) &kp A &kp S &kp E &kp C &kp A &kp M &kp P>;
            label = "TYPEBASECAMP";
        };

        TypesNoisycarlosHey: TypesNoisycarlosHey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp H &kp E &kp Y &kp DOT &kp C &kp O &kp M>;
            label = "TYPESNOISYCARLOSHEY";
        };

        TypeCarlosKPEmail: TypeCarlosKPEmail {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp C &kp A &kp R &kp L &kp O &kp S &kp AT &kp K &kp I &kp N &kp E &kp T &kp I &kp C &kp P &kp O &kp R &kp T &kp A &kp L &kp DOT &kp C &kp O &kp M>;
            label = "TYPECARLOSKPEMAIL";
        };

        TypeNoisycarlos: TypeNoisycarlos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S>;
            label = "TYPENOISYCARLOS";
        };

        TypeGithub: TypeGithub {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH &kp G &kp I &kp T &kp H &kp U &kp B &kp DOT &kp C &kp O &kp M &kp FSLH &kp N &kp O &kp I &kp S &kp Y &kp C &kp A &kp R &kp L &kp O &kp S &kp FSLH>;
            label = "TYPEGITHUB";
        };

        TypeMoves: TypeMoves {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp O &kp V &kp E &kp S>;
            label = "TYPEMOVES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   =   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  D   |  V   |   "["  |  |  "]"  |  K   |  H    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp GRAVE     &kp N1  &kp N2          &kp N3            &kp N4                &kp N5                                       &kp N6                &kp N7       &kp N8                 &kp N9                &kp N0    &kp EQUAL
&kp TAB       &kp Q   &DualKey 3 W    &DualKey 2 F      &kp P                 &kp B                                        &kp J                 &kp L        &kp U                  &DualKey 3 Y          &kp SEMI  &kp MINUS
&kp CAPSLOCK  &kp A   &kp R           &kp S             &kp T                 &DualKey 4 G                                 &DualKey 4 M          &kp N        &kp E                  &kp I                 &kp O     &kp SQT
&kp LSHFT     &kp Z   &mt LEFT_ALT X  &mt LEFT_SHIFT C  &mt LCTRL D           &mt LEFT_GUI V  &kp ESC             &kp ESC  &mt RIGHT_GUI K       &mt RCTRL H  &mt RIGHT_SHIFT COMMA  &mt RIGHT_ALT PERIOD  &kp FSLH  &kp RSHFT
                                      &kp LG(F12)       &kp LC(LG(LEFT_ALT))  &kp SPACE       &DualKey 1 ENTER    &kp RET  &DualKey 1 BACKSPACE  &kp SPACE    &to 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Navigation {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Nav";
            bindings = <
&kp LA(F4)  &zeroOne    &twoThree      &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4                     &trans         &trans     &trans     &trans         &trans           &trans
&kp F1      &kp LC(F4)  &kp LC(PG_UP)  &kp UP        &kp LC(PG_DN)  &kp LC(LS(T))                    &kp LC(PG_UP)  &kp PG_DN  &kp PG_UP  &kp LC(PG_DN)  &kp PRINTSCREEN  &none
&kp GRAVE   &kp EXCL    &kp LEFT       &kp DOWN      &kp RIGHT      &kp PRCNT                        &kp LEFT       &kp DOWN   &kp UP     &kp RIGHT      &kp SCROLLLOCK   &kp C_PAUSE
&trans      &trans      &trans         &trans        &trans         &trans         &trans    &trans  &kp F          &kp H      &kp HOME   &kp END        &kp RBRC         &kp PIPE
                                       &to 0         &trans         &trans         &trans    &trans  &trans         &trans     &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Numbers {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Num";
            bindings = <
&kp LA(F4)  &kp F1      &kp F2         &kp F3    &kp F4         &kp F5                           &kp F6           &kp F7           &kp F8           &kp F9           &kp F10       &kp F12
&trans      &kp LC(F4)  &kp LC(PG_UP)  &kp UP    &kp LC(PG_DN)  &kp LC(LS(T))                    &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL  &kp F11
&trans      &kp LC(Z)   &kp LEFT       &kp DOWN  &kp RIGHT      &kp LA(LEFT)                     &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp K_CALC
&kp LC(C)   &kp Z       &kp PG_UP      &none     &kp PG_DN      &kp F          &trans    &trans  &kp KP_SUBTRACT  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &kp LS(LC(KP_NUMLOCK))
                                       &trans    &trans         &trans         &trans    &to 0   &kp ENTER        &kp KP_NUMBER_0  &kp KP_DOT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Symbols {
            bindings = <
&kp CAPS  &trans           &trans                &trans     &trans                 &trans                               &trans         &kp LEFT_PARENTHESIS  &trans         &kp RIGHT_PARENTHESIS  &trans             &kp K_SLEEP
&trans    &kp EXCLAMATION  &kp AT_SIGN           &kp HASH   &kp DOLLAR             &kp PERCENT                          &kp CARET      &kp LEFT_BRACE        &kp PIPE       &kp RIGHT_BRACE        &trans             &trans
&trans    &trans           &kp LEFT_PARENTHESIS  &kp STAR   &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES                    &kp BACKSLASH  &kp LEFT_BRACKET      &kp AMPERSAND  &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &trans
&trans    &trans           &kp TILDE             &kp GRAVE  &kp QUESTION           &kp SQT            &trans    &trans  &kp KP_PLUS    &kp MINUS             &kp COLON      &kp EQUAL              &trans             &trans
                                                 &trans     &trans                 &kp UNDER          &trans    &trans  &trans         &kp UNDER             &trans
            >;
        };

        Misc {
            bindings = <
&trans          &trans      &TapDanceEmail  &TapDanceNoisycarlos  &kp PRINTSCREEN        &trans                               &kp LC(LG(LA(F6)))  &kp LA(LC(LG(F7)))     &kp LA(LC(LG(F8)))     &kp LA(LC(LG(F9)))   &kp LA(LG(LC(F10)))   &kp RA(F4)
&trans          &trans      &TypeWWB        &TypeFixes            &TapDanceP             &TypeBasecamp                        &kp LG(LC(LA(J)))   &kp LA(LC(LG(L)))      &kp LA(LC(LG(U)))      &kp LC(LG(LA(Y)))    &kp LC(LG(LA(SEMI)))  &trans
&trans          &TypeAdds   &TapDanceR      &TapDanceS            &trans                 &trans                               &kp LA(LC(LG(M)))   &kp LA(LC(LG(N)))      &kp LA(LC(LG(E)))      &kp LC(LA(LG(I)))    &kp LA(LC(LG(O)))     &trans
&kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY      &none                 &TapDanceD             &TypeMoves     &kp C_MUTE    &trans  &kp LA(LG(LC(K)))   &kp LA(LC(LG(H)))      &kp LA(LG(LC(COMMA)))  &kp LA(LC(LG(DOT)))  &kp LG(LC(LA(FSLH)))  &trans
                                            &trans                &kp LA(LC(LG(SPACE)))  &to 1          &to 2         &to 2   &to 1               &kp RG(RC(RA(SPACE)))  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
